// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  manager: (where?: ManagerWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderItem: (where?: OrderItemWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  manager: (where: ManagerWhereUniqueInput) => ManagerNullablePromise;
  managers: (args?: {
    where?: ManagerWhereInput;
    orderBy?: ManagerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Manager>;
  managersConnection: (args?: {
    where?: ManagerWhereInput;
    orderBy?: ManagerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ManagerConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderItem: (where: OrderItemWhereUniqueInput) => OrderItemNullablePromise;
  orderItems: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderItem>;
  orderItemsConnection: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderItemConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createManager: (data: ManagerCreateInput) => ManagerPromise;
  updateManager: (args: {
    data: ManagerUpdateInput;
    where: ManagerWhereUniqueInput;
  }) => ManagerPromise;
  updateManyManagers: (args: {
    data: ManagerUpdateManyMutationInput;
    where?: ManagerWhereInput;
  }) => BatchPayloadPromise;
  upsertManager: (args: {
    where: ManagerWhereUniqueInput;
    create: ManagerCreateInput;
    update: ManagerUpdateInput;
  }) => ManagerPromise;
  deleteManager: (where: ManagerWhereUniqueInput) => ManagerPromise;
  deleteManyManagers: (where?: ManagerWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderItem: (data: OrderItemCreateInput) => OrderItemPromise;
  updateOrderItem: (args: {
    data: OrderItemUpdateInput;
    where: OrderItemWhereUniqueInput;
  }) => OrderItemPromise;
  updateManyOrderItems: (args: {
    data: OrderItemUpdateManyMutationInput;
    where?: OrderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderItem: (args: {
    where: OrderItemWhereUniqueInput;
    create: OrderItemCreateInput;
    update: OrderItemUpdateInput;
  }) => OrderItemPromise;
  deleteOrderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  deleteManyOrderItems: (where?: OrderItemWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  manager: (
    where?: ManagerSubscriptionWhereInput
  ) => ManagerSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderItem: (
    where?: OrderItemSubscriptionWhereInput
  ) => OrderItemSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StatusOrderItem = "CANCELED" | "OK";

export type StatusOrder = "CANCELED" | "APPROVED" | "ANALYZING";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subTotal_ASC"
  | "subTotal_DESC"
  | "total_ASC"
  | "total_DESC"
  | "statusOrder_ASC"
  | "statusOrder_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type OrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "price_ASC"
  | "price_DESC"
  | "discount_ASC"
  | "discount_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "cpf_ASC"
  | "cpf_DESC"
  | "birthDate_ASC"
  | "birthDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type ManagerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "suggestedPrice_ASC"
  | "suggestedPrice_DESC"
  | "store_ASC"
  | "store_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  email?: Maybe<String>;
  cpf?: Maybe<String>;
}>;

export interface OrderWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  subTotal?: Maybe<Float>;
  subTotal_not?: Maybe<Float>;
  subTotal_in?: Maybe<Float[] | Float>;
  subTotal_not_in?: Maybe<Float[] | Float>;
  subTotal_lt?: Maybe<Float>;
  subTotal_lte?: Maybe<Float>;
  subTotal_gt?: Maybe<Float>;
  subTotal_gte?: Maybe<Float>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  orderItens_every?: Maybe<OrderItemWhereInput>;
  orderItens_some?: Maybe<OrderItemWhereInput>;
  orderItens_none?: Maybe<OrderItemWhereInput>;
  statusOrder?: Maybe<StatusOrder>;
  statusOrder_not?: Maybe<StatusOrder>;
  statusOrder_in?: Maybe<StatusOrder[] | StatusOrder>;
  statusOrder_not_in?: Maybe<StatusOrder[] | StatusOrder>;
  customer?: Maybe<CustomerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface OrderItemWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  discount?: Maybe<Float>;
  discount_not?: Maybe<Float>;
  discount_in?: Maybe<Float[] | Float>;
  discount_not_in?: Maybe<Float[] | Float>;
  discount_lt?: Maybe<Float>;
  discount_lte?: Maybe<Float>;
  discount_gt?: Maybe<Float>;
  discount_gte?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  status_not?: Maybe<StatusOrderItem>;
  status_in?: Maybe<StatusOrderItem[] | StatusOrderItem>;
  status_not_in?: Maybe<StatusOrderItem[] | StatusOrderItem>;
  order?: Maybe<OrderWhereInput>;
  product?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  OR?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  NOT?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  suggestedPrice?: Maybe<Float>;
  suggestedPrice_not?: Maybe<Float>;
  suggestedPrice_in?: Maybe<Float[] | Float>;
  suggestedPrice_not_in?: Maybe<Float[] | Float>;
  suggestedPrice_lt?: Maybe<Float>;
  suggestedPrice_lte?: Maybe<Float>;
  suggestedPrice_gt?: Maybe<Float>;
  suggestedPrice_gte?: Maybe<Float>;
  store?: Maybe<Int>;
  store_not?: Maybe<Int>;
  store_in?: Maybe<Int[] | Int>;
  store_not_in?: Maybe<Int[] | Int>;
  store_lt?: Maybe<Int>;
  store_lte?: Maybe<Int>;
  store_gt?: Maybe<Int>;
  store_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  cpf?: Maybe<String>;
  cpf_not?: Maybe<String>;
  cpf_in?: Maybe<String[] | String>;
  cpf_not_in?: Maybe<String[] | String>;
  cpf_lt?: Maybe<String>;
  cpf_lte?: Maybe<String>;
  cpf_gt?: Maybe<String>;
  cpf_gte?: Maybe<String>;
  cpf_contains?: Maybe<String>;
  cpf_not_contains?: Maybe<String>;
  cpf_starts_with?: Maybe<String>;
  cpf_not_starts_with?: Maybe<String>;
  cpf_ends_with?: Maybe<String>;
  cpf_not_ends_with?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  birthDate_not?: Maybe<DateTimeInput>;
  birthDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_lt?: Maybe<DateTimeInput>;
  birthDate_lte?: Maybe<DateTimeInput>;
  birthDate_gt?: Maybe<DateTimeInput>;
  birthDate_gte?: Maybe<DateTimeInput>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export type ManagerWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  email?: Maybe<String>;
}>;

export interface ManagerWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<ManagerWhereInput[] | ManagerWhereInput>;
  OR?: Maybe<ManagerWhereInput[] | ManagerWhereInput>;
  NOT?: Maybe<ManagerWhereInput[] | ManagerWhereInput>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export type OrderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface CustomerCreateInput {
  id?: Maybe<UUID>;
  email: String;
  name: String;
  password: String;
  cpf: String;
  birthDate: DateTimeInput;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
  deleted?: Maybe<Boolean>;
}

export interface OrderCreateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutCustomerInput {
  id?: Maybe<UUID>;
  subTotal: Float;
  total: Float;
  orderItens?: Maybe<OrderItemCreateManyWithoutOrderInput>;
  statusOrder?: Maybe<StatusOrder>;
  deleted?: Maybe<Boolean>;
}

export interface OrderItemCreateManyWithoutOrderInput {
  create?: Maybe<
    OrderItemCreateWithoutOrderInput[] | OrderItemCreateWithoutOrderInput
  >;
  connect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
}

export interface OrderItemCreateWithoutOrderInput {
  id?: Maybe<UUID>;
  quantity: Int;
  price: Float;
  discount?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  product: ProductCreateOneInput;
  deleted?: Maybe<Boolean>;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateInput {
  id?: Maybe<UUID>;
  description: String;
  suggestedPrice: Float;
  store?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  cpf?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
  deleted?: Maybe<Boolean>;
}

export interface OrderUpdateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    | OrderUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    | OrderUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutCustomerDataInput;
}

export interface OrderUpdateWithoutCustomerDataInput {
  subTotal?: Maybe<Float>;
  total?: Maybe<Float>;
  orderItens?: Maybe<OrderItemUpdateManyWithoutOrderInput>;
  statusOrder?: Maybe<StatusOrder>;
  deleted?: Maybe<Boolean>;
}

export interface OrderItemUpdateManyWithoutOrderInput {
  create?: Maybe<
    OrderItemCreateWithoutOrderInput[] | OrderItemCreateWithoutOrderInput
  >;
  delete?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  connect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  set?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  disconnect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  update?: Maybe<
    | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    | OrderItemUpdateWithWhereUniqueWithoutOrderInput
  >;
  upsert?: Maybe<
    | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    | OrderItemUpsertWithWhereUniqueWithoutOrderInput
  >;
  deleteMany?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  updateMany?: Maybe<
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput
  >;
}

export interface OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput;
  data: OrderItemUpdateWithoutOrderDataInput;
}

export interface OrderItemUpdateWithoutOrderDataInput {
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  discount?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  deleted?: Maybe<Boolean>;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateDataInput {
  description?: Maybe<String>;
  suggestedPrice?: Maybe<Float>;
  store?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput;
  update: OrderItemUpdateWithoutOrderDataInput;
  create: OrderItemCreateWithoutOrderInput;
}

export interface OrderItemScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  discount?: Maybe<Float>;
  discount_not?: Maybe<Float>;
  discount_in?: Maybe<Float[] | Float>;
  discount_not_in?: Maybe<Float[] | Float>;
  discount_lt?: Maybe<Float>;
  discount_lte?: Maybe<Float>;
  discount_gt?: Maybe<Float>;
  discount_gte?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  status_not?: Maybe<StatusOrderItem>;
  status_in?: Maybe<StatusOrderItem[] | StatusOrderItem>;
  status_not_in?: Maybe<StatusOrderItem[] | StatusOrderItem>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  OR?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  NOT?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
}

export interface OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput;
  data: OrderItemUpdateManyDataInput;
}

export interface OrderItemUpdateManyDataInput {
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  discount?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  deleted?: Maybe<Boolean>;
}

export interface OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutCustomerDataInput;
  create: OrderCreateWithoutCustomerInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  subTotal?: Maybe<Float>;
  subTotal_not?: Maybe<Float>;
  subTotal_in?: Maybe<Float[] | Float>;
  subTotal_not_in?: Maybe<Float[] | Float>;
  subTotal_lt?: Maybe<Float>;
  subTotal_lte?: Maybe<Float>;
  subTotal_gt?: Maybe<Float>;
  subTotal_gte?: Maybe<Float>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  statusOrder?: Maybe<StatusOrder>;
  statusOrder_not?: Maybe<StatusOrder>;
  statusOrder_in?: Maybe<StatusOrder[] | StatusOrder>;
  statusOrder_not_in?: Maybe<StatusOrder[] | StatusOrder>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  subTotal?: Maybe<Float>;
  total?: Maybe<Float>;
  statusOrder?: Maybe<StatusOrder>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  cpf?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
}

export interface ManagerCreateInput {
  id?: Maybe<UUID>;
  email: String;
  name: String;
  password: String;
  deleted?: Maybe<Boolean>;
}

export interface ManagerUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface ManagerUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface OrderCreateInput {
  id?: Maybe<UUID>;
  subTotal: Float;
  total: Float;
  orderItens?: Maybe<OrderItemCreateManyWithoutOrderInput>;
  statusOrder?: Maybe<StatusOrder>;
  customer: CustomerCreateOneWithoutOrdersInput;
  deleted?: Maybe<Boolean>;
}

export interface CustomerCreateOneWithoutOrdersInput {
  create?: Maybe<CustomerCreateWithoutOrdersInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerCreateWithoutOrdersInput {
  id?: Maybe<UUID>;
  email: String;
  name: String;
  password: String;
  cpf: String;
  birthDate: DateTimeInput;
  deleted?: Maybe<Boolean>;
}

export interface OrderUpdateInput {
  subTotal?: Maybe<Float>;
  total?: Maybe<Float>;
  orderItens?: Maybe<OrderItemUpdateManyWithoutOrderInput>;
  statusOrder?: Maybe<StatusOrder>;
  customer?: Maybe<CustomerUpdateOneRequiredWithoutOrdersInput>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<CustomerCreateWithoutOrdersInput>;
  update?: Maybe<CustomerUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutOrdersInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateWithoutOrdersDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  cpf?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpsertWithoutOrdersInput {
  update: CustomerUpdateWithoutOrdersDataInput;
  create: CustomerCreateWithoutOrdersInput;
}

export interface OrderUpdateManyMutationInput {
  subTotal?: Maybe<Float>;
  total?: Maybe<Float>;
  statusOrder?: Maybe<StatusOrder>;
  deleted?: Maybe<Boolean>;
}

export interface OrderItemCreateInput {
  id?: Maybe<UUID>;
  quantity: Int;
  price: Float;
  discount?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  order: OrderCreateOneWithoutOrderItensInput;
  product: ProductCreateOneInput;
  deleted?: Maybe<Boolean>;
}

export interface OrderCreateOneWithoutOrderItensInput {
  create?: Maybe<OrderCreateWithoutOrderItensInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutOrderItensInput {
  id?: Maybe<UUID>;
  subTotal: Float;
  total: Float;
  statusOrder?: Maybe<StatusOrder>;
  customer: CustomerCreateOneWithoutOrdersInput;
  deleted?: Maybe<Boolean>;
}

export interface OrderItemUpdateInput {
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  discount?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  order?: Maybe<OrderUpdateOneRequiredWithoutOrderItensInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  deleted?: Maybe<Boolean>;
}

export interface OrderUpdateOneRequiredWithoutOrderItensInput {
  create?: Maybe<OrderCreateWithoutOrderItensInput>;
  update?: Maybe<OrderUpdateWithoutOrderItensDataInput>;
  upsert?: Maybe<OrderUpsertWithoutOrderItensInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderUpdateWithoutOrderItensDataInput {
  subTotal?: Maybe<Float>;
  total?: Maybe<Float>;
  statusOrder?: Maybe<StatusOrder>;
  customer?: Maybe<CustomerUpdateOneRequiredWithoutOrdersInput>;
  deleted?: Maybe<Boolean>;
}

export interface OrderUpsertWithoutOrderItensInput {
  update: OrderUpdateWithoutOrderItensDataInput;
  create: OrderCreateWithoutOrderItensInput;
}

export interface OrderItemUpdateManyMutationInput {
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  discount?: Maybe<Float>;
  status?: Maybe<StatusOrderItem>;
  deleted?: Maybe<Boolean>;
}

export interface ProductUpdateInput {
  description?: Maybe<String>;
  suggestedPrice?: Maybe<Float>;
  store?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface ProductUpdateManyMutationInput {
  description?: Maybe<String>;
  suggestedPrice?: Maybe<Float>;
  store?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface ManagerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ManagerWhereInput>;
  AND?: Maybe<ManagerSubscriptionWhereInput[] | ManagerSubscriptionWhereInput>;
  OR?: Maybe<ManagerSubscriptionWhereInput[] | ManagerSubscriptionWhereInput>;
  NOT?: Maybe<ManagerSubscriptionWhereInput[] | ManagerSubscriptionWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface OrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderItemWhereInput>;
  AND?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Customer {
  id: UUID;
  email: String;
  name: String;
  password: String;
  cpf: String;
  birthDate: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  cpf: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  cpf: () => Promise<AsyncIterator<String>>;
  birthDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  cpf: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface Order {
  id: UUID;
  subTotal: Float;
  total: Float;
  statusOrder: StatusOrder;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<UUID>;
  subTotal: () => Promise<Float>;
  total: () => Promise<Float>;
  orderItens: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  statusOrder: () => Promise<StatusOrder>;
  customer: <T = CustomerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  subTotal: () => Promise<AsyncIterator<Float>>;
  total: () => Promise<AsyncIterator<Float>>;
  orderItens: <T = Promise<AsyncIterator<OrderItemSubscription>>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  statusOrder: () => Promise<AsyncIterator<StatusOrder>>;
  customer: <T = CustomerSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  subTotal: () => Promise<Float>;
  total: () => Promise<Float>;
  orderItens: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  statusOrder: () => Promise<StatusOrder>;
  customer: <T = CustomerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface OrderItem {
  id: UUID;
  quantity: Int;
  price: Float;
  discount: Float;
  status: StatusOrderItem;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface OrderItemPromise extends Promise<OrderItem>, Fragmentable {
  id: () => Promise<UUID>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  discount: () => Promise<Float>;
  status: () => Promise<StatusOrderItem>;
  order: <T = OrderPromise>() => T;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface OrderItemSubscription
  extends Promise<AsyncIterator<OrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  discount: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<StatusOrderItem>>;
  order: <T = OrderSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface OrderItemNullablePromise
  extends Promise<OrderItem | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  discount: () => Promise<Float>;
  status: () => Promise<StatusOrderItem>;
  order: <T = OrderPromise>() => T;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface Product {
  id: UUID;
  description: String;
  suggestedPrice: Float;
  store: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<UUID>;
  description: () => Promise<String>;
  suggestedPrice: () => Promise<Float>;
  store: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  description: () => Promise<AsyncIterator<String>>;
  suggestedPrice: () => Promise<AsyncIterator<Float>>;
  store: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  description: () => Promise<String>;
  suggestedPrice: () => Promise<Float>;
  store: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Manager {
  id: UUID;
  email: String;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface ManagerPromise extends Promise<Manager>, Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface ManagerSubscription
  extends Promise<AsyncIterator<Manager>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ManagerNullablePromise
  extends Promise<Manager | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface ManagerConnection {
  pageInfo: PageInfo;
  edges: ManagerEdge[];
}

export interface ManagerConnectionPromise
  extends Promise<ManagerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ManagerEdge>>() => T;
  aggregate: <T = AggregateManagerPromise>() => T;
}

export interface ManagerConnectionSubscription
  extends Promise<AsyncIterator<ManagerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ManagerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateManagerSubscription>() => T;
}

export interface ManagerEdge {
  node: Manager;
  cursor: String;
}

export interface ManagerEdgePromise extends Promise<ManagerEdge>, Fragmentable {
  node: <T = ManagerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ManagerEdgeSubscription
  extends Promise<AsyncIterator<ManagerEdge>>,
    Fragmentable {
  node: <T = ManagerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateManager {
  count: Int;
}

export interface AggregateManagerPromise
  extends Promise<AggregateManager>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateManagerSubscription
  extends Promise<AsyncIterator<AggregateManager>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemConnection {
  pageInfo: PageInfo;
  edges: OrderItemEdge[];
}

export interface OrderItemConnectionPromise
  extends Promise<OrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderItemEdge>>() => T;
  aggregate: <T = AggregateOrderItemPromise>() => T;
}

export interface OrderItemConnectionSubscription
  extends Promise<AsyncIterator<OrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderItemSubscription>() => T;
}

export interface OrderItemEdge {
  node: OrderItem;
  cursor: String;
}

export interface OrderItemEdgePromise
  extends Promise<OrderItemEdge>,
    Fragmentable {
  node: <T = OrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderItemEdgeSubscription
  extends Promise<AsyncIterator<OrderItemEdge>>,
    Fragmentable {
  node: <T = OrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderItem {
  count: Int;
}

export interface AggregateOrderItemPromise
  extends Promise<AggregateOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderItemSubscription
  extends Promise<AsyncIterator<AggregateOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: UUID;
  email: String;
  name: String;
  password: String;
  cpf: String;
  birthDate: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  cpf: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  cpf: () => Promise<AsyncIterator<String>>;
  birthDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ManagerSubscriptionPayload {
  mutation: MutationType;
  node: Manager;
  updatedFields: String[];
  previousValues: ManagerPreviousValues;
}

export interface ManagerSubscriptionPayloadPromise
  extends Promise<ManagerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ManagerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ManagerPreviousValuesPromise>() => T;
}

export interface ManagerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ManagerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ManagerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ManagerPreviousValuesSubscription>() => T;
}

export interface ManagerPreviousValues {
  id: UUID;
  email: String;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface ManagerPreviousValuesPromise
  extends Promise<ManagerPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface ManagerPreviousValuesSubscription
  extends Promise<AsyncIterator<ManagerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: UUID;
  subTotal: Float;
  total: Float;
  statusOrder: StatusOrder;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  subTotal: () => Promise<Float>;
  total: () => Promise<Float>;
  statusOrder: () => Promise<StatusOrder>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  subTotal: () => Promise<AsyncIterator<Float>>;
  total: () => Promise<AsyncIterator<Float>>;
  statusOrder: () => Promise<AsyncIterator<StatusOrder>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface OrderItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderItem;
  updatedFields: String[];
  previousValues: OrderItemPreviousValues;
}

export interface OrderItemSubscriptionPayloadPromise
  extends Promise<OrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderItemPreviousValuesPromise>() => T;
}

export interface OrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderItemPreviousValuesSubscription>() => T;
}

export interface OrderItemPreviousValues {
  id: UUID;
  quantity: Int;
  price: Float;
  discount: Float;
  status: StatusOrderItem;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface OrderItemPreviousValuesPromise
  extends Promise<OrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  discount: () => Promise<Float>;
  status: () => Promise<StatusOrderItem>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface OrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  discount: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<StatusOrderItem>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: UUID;
  description: String;
  suggestedPrice: Float;
  store: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  description: () => Promise<String>;
  suggestedPrice: () => Promise<Float>;
  store: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  description: () => Promise<AsyncIterator<String>>;
  suggestedPrice: () => Promise<AsyncIterator<Float>>;
  store: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export type UUID = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Manager",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderItem",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "StatusOrder",
    embedded: false
  },
  {
    name: "StatusOrderItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_SERVER_ENDPOINT"]}:${
    process.env["PRISMA_SERVER_PORT"]
  }/${process.env["PRISMA_APP_NAME"]}/${process.env["PRISMA_APP_STAGE"]}`,
  secret: `${process.env["PRISMA_MANAGEMENT_API_SECRET"]}`
});
export const prisma = new Prisma();
